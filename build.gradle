import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'com.gradleup.shadow' version '8.3.5'
}


base {
	archivesName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"pridge" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath = file("src/main/resources/pridge.accesswidener")
}

repositories {
	mavenCentral()
	maven {
		url = "https://maven.notenoughupdates.org/releases/"
	}
}

// A dedicated configuration for dependencies to be shaded.
configurations {
	shadowModImpl
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.23"

	// Add moulconfig to our custom shadow configuration.
	// This will pull in moulconfig and all of its transitive dependencies.
	shadowModImpl "org.notenoughupdates.moulconfig:modern-1.21.5:3.10.0"

	// Make the shaded dependencies available at compile time.
	configurations.modImplementation.extendsFrom(configurations.shadowModImpl)
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	it.options.compilerArgs += "-Xlint:deprecation"
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

shadowJar {
	// Include the client-specific code in the final JAR
	from sourceSets.named("client").map { it.output }
	// Specify that we are shading dependencies from our custom configuration
	configurations = [project.configurations.shadowModImpl]

	// *** CRITICAL FIX #1: Merge service files ***
	// This prevents ServiceLoader failures by merging META-INF/services files
	// from all dependencies and relocating the class names within them.
	mergeServiceFiles()

	// Relocate the moulconfig package to prevent classpath conflicts.
	relocate("io.github.notenoughupdates.moulconfig", "io.github.ricciow.deps.moulconfig")

	// Set a classifier for the intermediate, un-remapped shadow JAR.
	archiveClassifier.set("all-dev")
}

task("remapShadowJar", type: RemapJarTask, dependsOn: shadowJar) {
	// *** REFINEMENT #1: Use.set() for Gradle properties ***
	input.set(shadowJar.archiveFile)

	// Set the classifier for the final, remapped, distributable JAR.
	// This will produce 'pridge-<version>-all.jar'.
	archiveClassifier.set("")

	// *** REFINEMENT #2: Ensure compatibility with Loom's dependency system ***
	addNestedDependencies.set(true)
}

remapJar {
	archiveClassifier.set("noShadow")
}

// Ensure the final remapped JAR is part of the main build artifacts.
assemble {
	dependsOn "remapShadowJar"
}

jar {
	// The standard jar task will now produce a "thin" dev jar.
	from("LICENSE") {
		rename { "${it}_${project.archives_base_name}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			// This should be configured to publish the remapped shadow JAR if desired.
			from components.java
		}
	}
	repositories {
		// Add repositories to publish to here.
	}
}